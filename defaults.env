# This environment file serves to configure the Tagioalisi runtime,
# which is based on using a local Docker Compose stack. Some variables
# are consumed by Compose itself, while others are passed through to
# the underlying processes.

# These variables have reasonable defaults, but some of them MUST be
# updated/set before the bot will run properly. Read through the entire file
# make sure everything looks good.

#================================#
#     DATABASE CONFIGURATION     #
#================================#

# [UPDATE?] Details used for creating the Tagioalisi backing database.
# Database credentials/details only need updating if you expose your database to the network.
# By default, the database is restricted to the network within Docker Compose, so common credentials are OK.
POSTGRES_USER=tagioalisi
POSTGRES_PASSWORD=tagi_secret!7461
POSTGRES_DB=tagioalisi
# This configuration is also used by Tagioalisi, from below.


#============================#
#     BOT CONFIGURATION      #
#============================#

# Whether to enable debug logs by the bot
DEBUG=TRUE

# Port that Tagioalisi Bot is exposed on; note: when using Docker Compose, this refers to *inside* the container
BOT_PORT=80

# Port that the Docker Compose setup exposes the bot on the *host* (e.g. localhost:8081)
BOT_EXPOSE_PORT=8081

# [UPDATE] The bot token that Tagioalisi uses to connect to Discord 
DISCORD_TOKEN=

# [UPDATE] The channel ID that the bot uses for runtime logging and status reporting
DISCORD_LOG_CHANNEL=327526752203177984

# The list of bot modules to *not* start; find valid options using: git grep 'func (m Module) Name() string'
BLACKLIST_BOT_MODULES=

# Details regarding how the bot authenticates users via Discord's OAuth2 API
# The values must match those in your Discord application at https://discord.com/developers/applications
OAUTH_CLIENT_ID=
OAUTH_CLIENT_SECRET=
OAUTH_AUTH_ENDPOINT=https://discordapp.com/api/oauth2/authorize
OAUTH_TOKEN_ENDPOINT=https://discordapp.com/api/oauth2/token
OAUTH_REDIRECT_URL=

# [UPDATE] Salt string that the bot uses to sign JWT tokens; this can be any string
JWT_HMAC_SECRET=supersecret

# [UPDATE] Base-64 rendition of a bidirectional AES key used to store client state
# Generate using: cat /dev/random | head -c32 | base64
# The default value works, but is (naturally) public. Generate your own.
AES_KEY_B64=zvFXk6LbvG5jTG7JlGBQ57MdqUwjdS/wH3gVWXkSOUU=

# The API key to use for accessing the Azure News Search API; required for the `!news` command
AZURE_NEWS_SEARCH_KEY=XXXXXXXXXXXXXXXX

# The API key to use for accessing the Merriam-Webster Dictionary API; required for the `!define` command
MERRIAM_WEBSTER_DICTIONARY_KEY=XXXXXXXXXXXXXXXXXXXX


################################
#     WEB UI CONFIGURATION     #
################################

# Port that Tagioalisi's Web UI runs on inside the Docker Compose container; only relevant for `runtime/`
NGINX_PORT=80

# Port that `npm run watch[:dev|:prod]` serves the web content on inside the devcontainer; only relevant for `.devcontainer/` 
WEBPACK_DEV_PORT=8080

# Port that the web UI is exposed on the *host* (e.g. localhost:8080); maps to NGINX_PORT or WEBPACK_DEV_PORT depending on the setup
WEB_EXPOSE_PORT=8080

# The base URL for API to use to refer to the bot's web endpoints
# Note: since the UI runs in a browser which is outside the Docker Compose stack, it should be written from that perspective
BOT_EXTERNAL_BASE_URL=http://localhost:8081
